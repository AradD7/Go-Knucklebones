// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 003_games.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewGame = `-- name: CreateNewGame :one
INSERT INTO games(id, created_at, updated_at, board1, board2)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, board1, board2, winner, player_turn
`

type CreateNewGameParams struct {
	Board1 uuid.UUID
	Board2 uuid.NullUUID
}

func (q *Queries) CreateNewGame(ctx context.Context, arg CreateNewGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createNewGame, arg.Board1, arg.Board2)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Board1,
		&i.Board2,
		&i.Winner,
		&i.PlayerTurn,
	)
	return i, err
}

const getGameById = `-- name: GetGameById :one

SELECT id, created_at, updated_at, board1, board2, winner, player_turn FROM games
WHERE id = $1
`

func (q *Queries) GetGameById(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Board1,
		&i.Board2,
		&i.Winner,
		&i.PlayerTurn,
	)
	return i, err
}

const joinGame = `-- name: JoinGame :exec

UPDATE games
SET board2 = $2
WHERE id = $1
`

type JoinGameParams struct {
	ID     uuid.UUID
	Board2 uuid.NullUUID
}

func (q *Queries) JoinGame(ctx context.Context, arg JoinGameParams) error {
	_, err := q.db.ExecContext(ctx, joinGame, arg.ID, arg.Board2)
	return err
}

const setGameWinner = `-- name: SetGameWinner :exec
UPDATE games
SET winner = $2, updated_at = NOW()
WHERE id = $1
`

type SetGameWinnerParams struct {
	ID     uuid.UUID
	Winner uuid.NullUUID
}

func (q *Queries) SetGameWinner(ctx context.Context, arg SetGameWinnerParams) error {
	_, err := q.db.ExecContext(ctx, setGameWinner, arg.ID, arg.Winner)
	return err
}

const setPlayerTurn = `-- name: SetPlayerTurn :exec

UPDATE games
SET player_turn = $2
WHERE id = $1
`

type SetPlayerTurnParams struct {
	ID         uuid.UUID
	PlayerTurn uuid.NullUUID
}

func (q *Queries) SetPlayerTurn(ctx context.Context, arg SetPlayerTurnParams) error {
	_, err := q.db.ExecContext(ctx, setPlayerTurn, arg.ID, arg.PlayerTurn)
	return err
}

const updateGame = `-- name: UpdateGame :exec

UPDATE games
SET updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateGame(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, updateGame, id)
	return err
}
