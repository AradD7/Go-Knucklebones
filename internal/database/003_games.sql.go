// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 003_games.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewGame = `-- name: CreateNewGame :one
INSERT INTO games(id, created_at, updated_at, board1, board2)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, board1, board2, winner
`

type CreateNewGameParams struct {
	Board1 uuid.UUID
	Board2 uuid.UUID
}

func (q *Queries) CreateNewGame(ctx context.Context, arg CreateNewGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createNewGame, arg.Board1, arg.Board2)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Board1,
		&i.Board2,
		&i.Winner,
	)
	return i, err
}

const setGameWinner = `-- name: SetGameWinner :exec
UPDATE games
SET winner = $2
WHERE id = $1
`

type SetGameWinnerParams struct {
	ID     uuid.UUID
	Winner uuid.NullUUID
}

func (q *Queries) SetGameWinner(ctx context.Context, arg SetGameWinnerParams) error {
	_, err := q.db.ExecContext(ctx, setGameWinner, arg.ID, arg.Winner)
	return err
}
