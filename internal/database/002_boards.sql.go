// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 002_boards.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (id, created_at, updated_at, board, player_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    ARRAY[]::INTEGER[][],
    $1
)
RETURNING id, created_at, updated_at, board, player_id, game_id
`

func (q *Queries) CreateBoard(ctx context.Context, playerID uuid.UUID) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard, playerID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Board),
		&i.PlayerID,
		&i.GameID,
	)
	return i, err
}

const linkGame = `-- name: LinkGame :exec

UPDATE boards
SET game_id = $2
WHERE id = $1
`

type LinkGameParams struct {
	ID     uuid.UUID
	GameID uuid.NullUUID
}

func (q *Queries) LinkGame(ctx context.Context, arg LinkGameParams) error {
	_, err := q.db.ExecContext(ctx, linkGame, arg.ID, arg.GameID)
	return err
}
