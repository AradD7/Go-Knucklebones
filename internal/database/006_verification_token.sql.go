// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: 006_verification_token.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createVerificationToken = `-- name: CreateVerificationToken :one
INSERT INTO verification_tokens (token_hash, player_id, expires_at, created_at)
VALUES (
    $1,
    $2,
    NOW() AT TIME ZONE 'UTC' + INTERVAL '2 hours',
    NOW() AT TIME ZONE 'UTC'
)
RETURNING token_hash, player_id, expires_at, created_at
`

type CreateVerificationTokenParams struct {
	TokenHash string
	PlayerID  uuid.UUID
}

func (q *Queries) CreateVerificationToken(ctx context.Context, arg CreateVerificationTokenParams) (VerificationToken, error) {
	row := q.db.QueryRowContext(ctx, createVerificationToken, arg.TokenHash, arg.PlayerID)
	var i VerificationToken
	err := row.Scan(
		&i.TokenHash,
		&i.PlayerID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteVerificationToken = `-- name: DeleteVerificationToken :exec

DELETE FROM verification_tokens
WHERE token_hash = $1
`

func (q *Queries) DeleteVerificationToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.ExecContext(ctx, deleteVerificationToken, tokenHash)
	return err
}

const getVerificationToken = `-- name: GetVerificationToken :one

SELECT token_hash, player_id, expires_at, created_at FROM verification_tokens
WHERE token_hash = $1
`

func (q *Queries) GetVerificationToken(ctx context.Context, tokenHash string) (VerificationToken, error) {
	row := q.db.QueryRowContext(ctx, getVerificationToken, tokenHash)
	var i VerificationToken
	err := row.Scan(
		&i.TokenHash,
		&i.PlayerID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getVerificationTokenByPlayerId = `-- name: GetVerificationTokenByPlayerId :one

SELECT token_hash, player_id, expires_at, created_at FROM verification_tokens
WHERE player_id = $1
`

func (q *Queries) GetVerificationTokenByPlayerId(ctx context.Context, playerID uuid.UUID) (VerificationToken, error) {
	row := q.db.QueryRowContext(ctx, getVerificationTokenByPlayerId, playerID)
	var i VerificationToken
	err := row.Scan(
		&i.TokenHash,
		&i.PlayerID,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
